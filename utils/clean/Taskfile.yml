version: '3'

# Taskfile pour les utilitaires de nettoyage

tasks:
  logs:
    desc: "Nettoie les fichiers de logs anciens"
    silent: true
    summary: |
      Supprime les fichiers de logs plus anciens que le nombre de jours sp√©cifi√©.

      Variables:
      - DAYS: Nombre de jours √† conserver (d√©faut: 7)
      - LOG_PATTERN: Pattern des fichiers logs (d√©faut: *.log)
      - DIRS: Dossiers √† nettoyer (d√©faut: .)
    vars:
      DAYS: '{{.DAYS | default "7"}}'
      LOG_PATTERN: '{{.LOG_PATTERN | default "*.log"}}'
      DIRS: '{{.DIRS | default "."}}'
    cmds:
    - |
      echo "üßπ Nettoyage des logs de plus de {{.DAYS}} jours..."
      echo "üìÅ Pattern: {{.LOG_PATTERN}}"
      echo "üìÇ Dossiers: {{.DIRS}}"
      echo ""

      files_removed=0
      total_size=0

      # Conversion des dossiers en tableau
      IFS=',' read -ra dirs <<< "{{.DIRS}}"

      for dir in "${dirs[@]}"; do
        if [ ! -d "$dir" ]; then
          echo "‚ö†Ô∏è  Dossier '$dir' introuvable, ignor√©"
          continue
        fi
        
        echo "üîç Recherche dans: $dir"
        
        # Recherche et suppression des fichiers logs anciens
        find "$dir" -name "{{.LOG_PATTERN}}" -type f -mtime +{{.DAYS}} | while read -r file; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            echo "üóëÔ∏è  Suppression: $file ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
            rm -f "$file"
            files_removed=$((files_removed + 1))
            total_size=$((total_size + size))
          fi
        done
      done

      if [ $files_removed -eq 0 ]; then
        echo "‚úÖ Aucun fichier log ancien trouv√©"
      else
        echo ""
        echo "‚úÖ $files_removed fichier(s) supprim√©(s)"
        echo "üíæ Espace lib√©r√©: $(numfmt --to=iec $total_size 2>/dev/null || echo "$total_size bytes")"
      fi

  temp:
    desc: "Nettoie les fichiers temporaires"
    silent: true
    summary: |
      Supprime les fichiers et dossiers temporaires courants.

      Variables:
      - TEMP_PATTERNS: Patterns √† supprimer (d√©faut: tmp,temp,*.tmp,*.temp,node_modules/.cache)
      - DRY_RUN: Mode simulation (d√©faut: false)
    vars:
      TEMP_PATTERNS: '{{.TEMP_PATTERNS | default "tmp,temp,*.tmp,*.temp,node_modules/.cache,dist,build"}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    cmds:
    - |
      echo "üßπ Nettoyage des fichiers temporaires..."

      if [ "{{.DRY_RUN}}" = "true" ]; then
        echo "üîç Mode simulation activ√© (aucune suppression)"
      fi

      echo "üìã Patterns: {{.TEMP_PATTERNS}}"
      echo ""

      files_removed=0
      total_size=0

      # Conversion des patterns en tableau
      IFS=',' read -ra patterns <<< "{{.TEMP_PATTERNS}}"

      for pattern in "${patterns[@]}"; do
        echo "üîç Recherche: $pattern"
        
        # Utilisation de find pour g√©rer les patterns avec wildcards
        if [[ "$pattern" == *"*"* ]]; then
          # Pattern avec wildcard
          find . -name "$pattern" -type f 2>/dev/null | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
              if [ "{{.DRY_RUN}}" = "true" ]; then
                echo "üîç Serait supprim√©: $file ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
              else
                echo "üóëÔ∏è  Suppression: $file ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
                rm -f "$file"
              fi
              files_removed=$((files_removed + 1))
              total_size=$((total_size + size))
            fi
          done
        else
          # Dossier ou fichier simple
          if [ -e "$pattern" ]; then
            if [ -d "$pattern" ]; then
              size=$(du -sh "$pattern" 2>/dev/null | cut -f1 || echo "0")
              if [ "{{.DRY_RUN}}" = "true" ]; then
                echo "üîç Serait supprim√©: $pattern/ ($size)"
              else
                echo "üóëÔ∏è  Suppression: $pattern/ ($size)"
                rm -rf "$pattern"
              fi
            else
              size=$(stat -f%z "$pattern" 2>/dev/null || stat -c%s "$pattern" 2>/dev/null || echo "0")
              if [ "{{.DRY_RUN}}" = "true" ]; then
                echo "üîç Serait supprim√©: $pattern ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
              else
                echo "üóëÔ∏è  Suppression: $pattern ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
                rm -f "$pattern"
              fi
            fi
            files_removed=$((files_removed + 1))
          fi
        fi
      done

      echo ""
      if [ "{{.DRY_RUN}}" = "true" ]; then
        echo "üîç $files_removed √©l√©ment(s) seraient supprim√©s en mode r√©el"
      elif [ $files_removed -eq 0 ]; then
        echo "‚úÖ Aucun fichier temporaire trouv√©"
      else
        echo "‚úÖ $files_removed √©l√©ment(s) supprim√©(s)"
      fi

  cache:
    desc: "Nettoie les caches de d√©veloppement"
    silent: true
    summary: |
      Nettoie les caches des outils de d√©veloppement courants.

      Variables:
      - TOOLS: Outils √† nettoyer (d√©faut: npm,yarn,docker,composer)
    vars:
      TOOLS: '{{.TOOLS | default "npm,yarn,docker,composer"}}'
    cmds:
    - |
      echo "üßπ Nettoyage des caches de d√©veloppement..."
      echo "üõ†Ô∏è  Outils: {{.TOOLS}}"
      echo ""

      # Conversion des outils en tableau
      IFS=',' read -ra tools <<< "{{.TOOLS}}"

      for tool in "${tools[@]}"; do
        echo "üîç Nettoyage cache: $tool"
        
        case "$tool" in
          "npm")
            if command -v npm >/dev/null 2>&1; then
              npm cache clean --force 2>/dev/null && echo "  ‚úÖ Cache npm nettoy√©" || echo "  ‚ö†Ô∏è  Erreur cache npm"
            else
              echo "  ‚ùå npm non install√©"
            fi
            ;;
          "yarn")
            if command -v yarn >/dev/null 2>&1; then
              yarn cache clean 2>/dev/null && echo "  ‚úÖ Cache yarn nettoy√©" || echo "  ‚ö†Ô∏è  Erreur cache yarn"
            else
              echo "  ‚ùå yarn non install√©"
            fi
            ;;
          "docker")
            if command -v docker >/dev/null 2>&1; then
              docker system prune -f 2>/dev/null && echo "  ‚úÖ Cache docker nettoy√©" || echo "  ‚ö†Ô∏è  Erreur cache docker"
            else
              echo "  ‚ùå docker non install√©"
            fi
            ;;
          "composer")
            if command -v composer >/dev/null 2>&1; then
              composer clear-cache 2>/dev/null && echo "  ‚úÖ Cache composer nettoy√©" || echo "  ‚ö†Ô∏è  Erreur cache composer"
            else
              echo "  ‚ùå composer non install√©"
            fi
            ;;
          *)
            echo "  ‚ùå Outil '$tool' non support√©"
            ;;
        esac
      done

      echo ""
      echo "‚úÖ Nettoyage des caches termin√©"

  all:
    desc: "Nettoie tout (logs, temp, cache)"
    silent: true
    summary: |
      Lance un nettoyage complet : logs anciens, fichiers temporaires et caches.

      Variables h√©rit√©es de chaque sous-t√¢che.
    cmds:
    - echo "üßπ Nettoyage complet en cours..."
    - echo ""
    - task: clean:logs
    - echo ""
    - task: clean:temp
    - echo ""
    - task: clean:cache
    - echo ""
    - echo "‚úÖ Nettoyage complet termin√©"
