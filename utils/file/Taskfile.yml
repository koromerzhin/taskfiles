version: '3'

# Taskfile pour les op√©rations sur les fichiers

vars:
  SOURCE_FILE: '{{.SOURCE_FILE | default ""}}'
  DEST_DIR: '{{.DEST_DIR | default ""}}'
  DEST_FILE: '{{.DEST_FILE | default ""}}'
  FORCE: '{{.FORCE | default "false"}}'

tasks:
  move:
    desc: "D√©place un fichier vers un autre dossier"
    silent: true
    summary: |
      D√©place un fichier vers un dossier de destination avec v√©rifications de s√©curit√©.

      Variables requises:
      - SOURCE_FILE: Chemin du fichier source √† d√©placer
      - DEST_DIR: Dossier de destination

      Variables optionnelles:
      - DEST_FILE: Nom du fichier de destination (si diff√©rent du source)
      - FORCE: Force le d√©placement m√™me si le fichier de destination existe (d√©faut: false)

      Exemples:
      task utils:file:move SOURCE_FILE=./test.txt DEST_DIR=./backup/
      task utils:file:move SOURCE_FILE=./config.json DEST_DIR=./settings/ DEST_FILE=config.bak.json
      task utils:file:move SOURCE_FILE=./old.log DEST_DIR=./logs/ FORCE=true
    preconditions:
    - sh: "[ -n '{{.SOURCE_FILE}}' ]"
      msg: "SOURCE_FILE est requis. Exemple: SOURCE_FILE=./fichier.txt"
    - sh: "[ -n '{{.DEST_DIR}}' ]"
      msg: "DEST_DIR est requis. Exemple: DEST_DIR=./dossier/"
    - sh: "[ -f '{{.SOURCE_FILE}}' ]"
      msg: "Le fichier source '{{.SOURCE_FILE}}' n'existe pas"
    cmds:
    - |
      source_file="{{.SOURCE_FILE}}"
      dest_dir="{{.DEST_DIR}}"
      dest_file="{{.DEST_FILE}}"
      force="{{.FORCE}}"

      # R√©sout les chemins absolus
      source_file=$(realpath "$source_file")
      dest_dir=$(realpath "$dest_dir" 2>/dev/null || echo "$dest_dir")

      # D√©termine le nom du fichier de destination
      if [ -n "$dest_file" ]; then
        final_dest="$dest_dir/$dest_file"
      else
        filename=$(basename "$source_file")
        final_dest="$dest_dir/$filename"
      fi

      echo "üìÅ D√©placement de fichier :"
      echo "  üìÑ Source : $source_file"
      echo "  üìÇ Destination : $final_dest"
      echo ""

      # Cr√©e le dossier de destination s'il n'existe pas
      if [ ! -d "$dest_dir" ]; then
        echo "üìù Cr√©ation du dossier de destination : $dest_dir"
        mkdir -p "$dest_dir"
      fi

      # V√©rifie si le fichier de destination existe d√©j√†
      if [ -f "$final_dest" ] && [ "$force" != "true" ]; then
        echo "‚ùå Erreur : Le fichier de destination '$final_dest' existe d√©j√†"
        echo "üí° Utilisez FORCE=true pour √©craser le fichier existant"
        exit 1
      fi

      # Affiche un avertissement si on √©crase un fichier
      if [ -f "$final_dest" ] && [ "$force" = "true" ]; then
        echo "‚ö†Ô∏è  √âcrasement du fichier existant : $final_dest"
      fi

      # Effectue le d√©placement
      if mv "$source_file" "$final_dest"; then
        echo "‚úÖ Fichier d√©plac√© avec succ√®s !"
        echo "üìç Nouveau chemin : $final_dest"
        
        # Affiche les informations du fichier d√©plac√©
        if command -v ls >/dev/null 2>&1; then
          echo ""
          echo "üìä Informations du fichier :"
          ls -lh "$final_dest"
        fi
      else
        echo "‚ùå Erreur lors du d√©placement du fichier"
        exit 1
      fi

  copy:
    desc: "Copie un fichier vers un autre dossier"
    silent: true
    summary: |
      Copie un fichier vers un dossier de destination avec v√©rifications de s√©curit√©.

      Variables requises:
      - SOURCE_FILE: Chemin du fichier source √† copier
      - DEST_DIR: Dossier de destination

      Variables optionnelles:
      - DEST_FILE: Nom du fichier de destination (si diff√©rent du source)
      - FORCE: Force la copie m√™me si le fichier de destination existe (d√©faut: false)

      Exemples:
      task utils:file:copy SOURCE_FILE=./test.txt DEST_DIR=./backup/
      task utils:file:copy SOURCE_FILE=./config.json DEST_DIR=./settings/ DEST_FILE=config.bak.json
      task utils:file:copy SOURCE_FILE=./important.log DEST_DIR=./logs/ FORCE=true
    preconditions:
    - sh: "[ -n '{{.SOURCE_FILE}}' ]"
      msg: "SOURCE_FILE est requis. Exemple: SOURCE_FILE=./fichier.txt"
    - sh: "[ -n '{{.DEST_DIR}}' ]"
      msg: "DEST_DIR est requis. Exemple: DEST_DIR=./dossier/"
    - sh: "[ -f '{{.SOURCE_FILE}}' ]"
      msg: "Le fichier source '{{.SOURCE_FILE}}' n'existe pas"
    cmds:
    - |
      source_file="{{.SOURCE_FILE}}"
      dest_dir="{{.DEST_DIR}}"
      dest_file="{{.DEST_FILE}}"
      force="{{.FORCE}}"

      # R√©sout les chemins absolus
      source_file=$(realpath "$source_file")
      dest_dir=$(realpath "$dest_dir" 2>/dev/null || echo "$dest_dir")

      # D√©termine le nom du fichier de destination
      if [ -n "$dest_file" ]; then
        final_dest="$dest_dir/$dest_file"
      else
        filename=$(basename "$source_file")
        final_dest="$dest_dir/$filename"
      fi

      echo "üìÅ Copie de fichier :"
      echo "  üìÑ Source : $source_file"
      echo "  üìÇ Destination : $final_dest"
      echo ""

      # Cr√©e le dossier de destination s'il n'existe pas
      if [ ! -d "$dest_dir" ]; then
        echo "üìù Cr√©ation du dossier de destination : $dest_dir"
        mkdir -p "$dest_dir"
      fi

      # V√©rifie si le fichier de destination existe d√©j√†
      if [ -f "$final_dest" ] && [ "$force" != "true" ]; then
        echo "‚ùå Erreur : Le fichier de destination '$final_dest' existe d√©j√†"
        echo "üí° Utilisez FORCE=true pour √©craser le fichier existant"
        exit 1
      fi

      # Affiche un avertissement si on √©crase un fichier
      if [ -f "$final_dest" ] && [ "$force" = "true" ]; then
        echo "‚ö†Ô∏è  √âcrasement du fichier existant : $final_dest"
      fi

      # Effectue la copie
      if cp "$source_file" "$final_dest"; then
        echo "‚úÖ Fichier copi√© avec succ√®s !"
        echo "üìç Copie cr√©√©e : $final_dest"
        
        # Affiche les informations des fichiers
        if command -v ls >/dev/null 2>&1; then
          echo ""
          echo "üìä Informations des fichiers :"
          echo "Original :"
          ls -lh "$source_file"
          echo "Copie :"
          ls -lh "$final_dest"
        fi
      else
        echo "‚ùå Erreur lors de la copie du fichier"
        exit 1
      fi

  rename:
    desc: "Renomme un fichier dans le m√™me dossier"
    silent: true
    summary: |
      Renomme un fichier dans son dossier actuel.

      Variables requises:
      - SOURCE_FILE: Chemin du fichier source √† renommer
      - NEW_NAME: Nouveau nom du fichier

      Variables optionnelles:
      - FORCE: Force le renommage m√™me si le fichier de destination existe (d√©faut: false)

      Exemples:
      task utils:file:rename SOURCE_FILE=./old_name.txt NEW_NAME=new_name.txt
      task utils:file:rename SOURCE_FILE=./config.json NEW_NAME=config.backup.json FORCE=true
    vars:
      NEW_NAME: '{{.NEW_NAME | default ""}}'
    preconditions:
    - sh: "[ -n '{{.SOURCE_FILE}}' ]"
      msg: "SOURCE_FILE est requis. Exemple: SOURCE_FILE=./fichier.txt"
    - sh: "[ -n '{{.NEW_NAME}}' ]"
      msg: "NEW_NAME est requis. Exemple: NEW_NAME=nouveau_nom.txt"
    - sh: "[ -f '{{.SOURCE_FILE}}' ]"
      msg: "Le fichier source '{{.SOURCE_FILE}}' n'existe pas"
    cmds:
    - |
      source_file="{{.SOURCE_FILE}}"
      new_name="{{.NEW_NAME}}"
      force="{{.FORCE}}"

      # R√©sout le chemin absolu du fichier source
      source_file=$(realpath "$source_file")
      source_dir=$(dirname "$source_file")
      final_dest="$source_dir/$new_name"

      echo "üìù Renommage de fichier :"
      echo "  üìÑ Ancien nom : $source_file"
      echo "  üìÑ Nouveau nom : $final_dest"
      echo ""

      # V√©rifie si le fichier de destination existe d√©j√†
      if [ -f "$final_dest" ] && [ "$force" != "true" ]; then
        echo "‚ùå Erreur : Un fichier nomm√© '$new_name' existe d√©j√† dans ce dossier"
        echo "üí° Utilisez FORCE=true pour √©craser le fichier existant"
        exit 1
      fi

      # Affiche un avertissement si on √©crase un fichier
      if [ -f "$final_dest" ] && [ "$force" = "true" ]; then
        echo "‚ö†Ô∏è  √âcrasement du fichier existant : $final_dest"
      fi

      # Effectue le renommage
      if mv "$source_file" "$final_dest"; then
        echo "‚úÖ Fichier renomm√© avec succ√®s !"
        echo "üìç Nouveau chemin : $final_dest"
        
        # Affiche les informations du fichier renomm√©
        if command -v ls >/dev/null 2>&1; then
          echo ""
          echo "üìä Informations du fichier :"
          ls -lh "$final_dest"
        fi
      else
        echo "‚ùå Erreur lors du renommage du fichier"
        exit 1
      fi

  delete:
    desc: "Supprime un fichier avec confirmation"
    silent: true
    summary: |
      Supprime un fichier avec demande de confirmation.

      Variables requises:
      - SOURCE_FILE: Chemin du fichier √† supprimer

      Variables optionnelles:
      - FORCE: Force la suppression sans confirmation (d√©faut: false)

      Exemples:
      task utils:file:delete SOURCE_FILE=./temp.txt
      task utils:file:delete SOURCE_FILE=./old_file.log FORCE=true
    preconditions:
    - sh: "[ -n '{{.SOURCE_FILE}}' ]"
      msg: "SOURCE_FILE est requis. Exemple: SOURCE_FILE=./fichier.txt"
    - sh: "[ -f '{{.SOURCE_FILE}}' ]"
      msg: "Le fichier '{{.SOURCE_FILE}}' n'existe pas"
    cmds:
    - |
      source_file="{{.SOURCE_FILE}}"
      force="{{.FORCE}}"

      # R√©sout le chemin absolu
      source_file=$(realpath "$source_file")

      echo "üóëÔ∏è  Suppression de fichier :"
      echo "  üìÑ Fichier : $source_file"
      echo ""

      # Affiche les informations du fichier
      if command -v ls >/dev/null 2>&1; then
        echo "üìä Informations du fichier :"
        ls -lh "$source_file"
        echo ""
      fi

      # Demande de confirmation si FORCE n'est pas activ√©
      if [ "$force" != "true" ]; then
        printf "‚ùì √ätes-vous s√ªr de vouloir supprimer ce fichier ? [y/N] "
        read -r response
        case "$response" in
          [yY][eE][sS]|[yY])
            echo "‚úÖ Confirmation re√ßue, suppression en cours..."
            ;;
          *)
            echo "‚ùå Suppression annul√©e"
            exit 0
            ;;
        esac
      else
        echo "‚ö†Ô∏è  Suppression forc√©e (sans confirmation)"
      fi

      # Effectue la suppression
      if rm "$source_file"; then
        echo "‚úÖ Fichier supprim√© avec succ√®s !"
      else
        echo "‚ùå Erreur lors de la suppression du fichier"
        exit 1
      fi
