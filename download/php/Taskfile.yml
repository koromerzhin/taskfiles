version: '3'

vars:
  PHP_TOOLS_NAMES: |
    phploc.phar
    php-cs-fixer.phar
    phpmd.phar
    phpcbf.phar
    phpcs.phar
    phpstan.phar
    phpDocumentor.phar
    behat.phar
  PHP_TOOLS_URLS: |
    https://phar.phpunit.de/phploc-7.0.2.phar
    https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.64.0/php-cs-fixer.phar
    https://github.com/phpmd/phpmd/releases/download/2.15.0/phpmd.phar
    https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.7.2/phpcbf.phar
    https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.7.2/phpcs.phar
    https://github.com/phpstan/phpstan/releases/download/1.12.4/phpstan.phar
    https://github.com/phpDocumentor/phpDocumentor/releases/download/v3.5.3/phpDocumentor.phar
    https://github.com/Behat/Behat/releases/download/v3.14.0/behat.phar

tasks:
  tools:
    desc: "T√©l√©charge les outils PHP dans un dossier sp√©cifique"
    silent: true
    summary: |
      T√©l√©charge une collection d'outils PHP populaires dans un dossier.

      Variables:
      - TOOLS_DIR: Dossier de destination (d√©faut: ./tools/php)
      - FORCE: Force le t√©l√©chargement m√™me si le fichier existe (d√©faut: false)

      Outils t√©l√©charg√©s:
      - phploc.phar (PHP Lines of Code)
      - php-cs-fixer.phar (PHP CS Fixer)
      - phpmd.phar (PHP Mess Detector)
      - phpcbf.phar (PHP Code Beautifier)
      - phpcs.phar (PHP Code Sniffer)
      - phpstan.phar (PHPStan)
      - phpDocumentor.phar (phpDocumentor)
      - behat.phar (Behat)

      Exemples:
      task download:php:tools
      task download:php:tools TOOLS_DIR=./bin
      task download:php:tools FORCE=true
    vars:
      TOOLS_DIR: '{{.TOOLS_DIR | default "./tools/php"}}'
      FORCE: '{{.FORCE | default "false"}}'
    cmds:
    - |
      # Naviguer vers la racine du projet (parent du dossier download)
      cd ..
      project_root=$(pwd)

      # D√©terminer le chemin absolu du dossier de destination
      if [[ "{{.TOOLS_DIR}}" == /* ]]; then
        # Chemin absolu fourni
        tools_dir="{{.TOOLS_DIR}}"
      else
        # Chemin relatif fourni - le baser sur la racine du projet
        tools_dir="$project_root/{{.TOOLS_DIR}}"
      fi

      echo "üì¶ T√©l√©chargement des outils PHP dans '$tools_dir'..."
      echo ""

      # Cr√©ation du dossier de destination
      mkdir -p "$tools_dir"

      # R√©cup√©ration des variables et conversion en tableaux
      tool_names_raw="{{.PHP_TOOLS_NAMES}}"
      tool_urls_raw="{{.PHP_TOOLS_URLS}}"

      # Conversion en tableaux (compatible bash/zsh)
      tool_names=()
      tool_urls=()

      # Lecture ligne par ligne des noms d'outils
      while IFS= read -r line; do
        [[ -n "$line" ]] && tool_names+=("$line")
      done <<< "$tool_names_raw"

      # Lecture ligne par ligne des URLs
      while IFS= read -r line; do
        [[ -n "$line" ]] && tool_urls+=("$line")
      done <<< "$tool_urls_raw"

      # V√©rification que les tableaux ont la m√™me taille
      if [ ${#tool_names[@]} -ne ${#tool_urls[@]} ]; then
        echo "‚ùå Erreur: Le nombre de noms d'outils (${#tool_names[@]}) ne correspond pas au nombre d'URLs (${#tool_urls[@]})"
        exit 1
      fi

      # Compteurs
      downloaded=0
      skipped=0
      errors=0

      # T√©l√©chargement de chaque outil
      for i in "${!tool_names[@]}"; do
        tool="${tool_names[$i]}"
        url="${tool_urls[$i]}"
        target_file="$tools_dir/$tool"
        
        echo -n "‚¨áÔ∏è  $tool ... "
        
        # V√©rifier si le fichier existe d√©j√†
        if [ -f "$target_file" ] && [ "{{.FORCE}}" != "true" ]; then
          echo "‚è≠Ô∏è  d√©j√† pr√©sent"
          skipped=$((skipped + 1))
          continue
        fi
        
        # T√©l√©charger le fichier
        if curl -L -s -o "$target_file" "$url"; then
          # V√©rifier que le t√©l√©chargement a r√©ussi
          if [ -f "$target_file" ] && [ -s "$target_file" ]; then
            # Rendre le fichier ex√©cutable
            chmod +x "$target_file"
            echo "‚úÖ t√©l√©charg√©"
            downloaded=$((downloaded + 1))
          else
            echo "‚ùå √©chec (fichier vide)"
            rm -f "$target_file"
            errors=$((errors + 1))
          fi
        else
          echo "‚ùå √©chec du t√©l√©chargement"
          rm -f "$target_file"
          errors=$((errors + 1))
        fi
      done

      echo ""
      echo "üìä R√©sum√© :"
      echo "  ‚úÖ T√©l√©charg√©s: $downloaded"
      echo "  ‚è≠Ô∏è  Ignor√©s: $skipped"
      echo "  ‚ùå Erreurs: $errors"
      echo ""

      if [ $downloaded -gt 0 ]; then
        echo "üìÅ Outils disponibles dans '$tools_dir' :"
        ls -la "$tools_dir"/*.phar 2>/dev/null | awk '{print "  " $9 " (" $5 " bytes)"}'
      fi

      if [ $errors -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  Certains t√©l√©chargements ont √©chou√©. V√©rifiez votre connexion internet."
      fi

  update:
    desc: "Met √† jour tous les outils PHP (force le t√©l√©chargement)"
    silent: true
    summary: |
      Force la mise √† jour de tous les outils PHP m√™me s'ils existent d√©j√†.

      Variables:
      - TOOLS_DIR: Dossier de destination (d√©faut: ./tools/php)

      Exemple:
      task download:php:update
    vars:
      TOOLS_DIR: '{{.TOOLS_DIR | default "./tools/php"}}'
    cmds:
    - task: tools
      vars:
        TOOLS_DIR: '{{.TOOLS_DIR}}'
        FORCE: "true"

  list:
    desc: "Liste les outils PHP t√©l√©charg√©s"
    silent: true
    summary: |
      Affiche la liste des outils PHP pr√©sents dans le dossier.

      Variables:
      - TOOLS_DIR: Dossier √† v√©rifier (d√©faut: ./tools/php)
    vars:
      TOOLS_DIR: '{{.TOOLS_DIR | default "./tools/php"}}'
    cmds:
    - |
      # Naviguer vers la racine du projet (parent du dossier download)
      cd ..
      project_root=$(pwd)

      # D√©terminer le chemin absolu du dossier de destination
      if [[ "{{.TOOLS_DIR}}" == /* ]]; then
        # Chemin absolu fourni
        tools_dir="{{.TOOLS_DIR}}"
      else
        # Chemin relatif fourni - le baser sur la racine du projet
        tools_dir="$project_root/{{.TOOLS_DIR}}"
      fi

      if [ ! -d "$tools_dir" ]; then
        echo "‚ùå Le dossier '$tools_dir' n'existe pas"
        echo "üí° Utilisez 'task download:php:tools' pour t√©l√©charger les outils"
        exit 1
      fi

      echo "üìÅ Outils PHP dans '$tools_dir' :"
      echo ""

      # Conversion de la variable en tableau (suppression des retours √† la ligne)
      tool_names_raw="{{.PHP_TOOLS_NAMES}}"
      tool_names=()

      # Lecture ligne par ligne des noms d'outils
      while IFS= read -r line; do
        [[ -n "$line" ]] && tool_names+=("$line")
      done <<< "$tool_names_raw"

      total_tools=${#tool_names[@]}
      tools_found=0

      for tool in "${tool_names[@]}"; do
        if [ -f "$tools_dir/$tool" ]; then
          size=$(ls -lh "$tools_dir/$tool" | awk '{print $5}')
          perms=$(ls -l "$tools_dir/$tool" | awk '{print $1}')
          echo "  ‚úÖ $tool ($size) $perms"
          tools_found=$((tools_found + 1))
        else
          echo "  ‚ùå $tool (manquant)"
        fi
      done

      echo ""
      echo "üìä $tools_found/$total_tools outils pr√©sents"

      if [ $tools_found -lt $total_tools ]; then
        echo ""
        echo "üí° Pour t√©l√©charger les outils manquants :"
        echo "   task download:php:tools"
      fi

  clean:
    desc: "Supprime tous les outils PHP t√©l√©charg√©s"
    silent: true
    summary: |
      Supprime le dossier contenant les outils PHP.

      Variables:
      - TOOLS_DIR: Dossier √† supprimer (d√©faut: ./tools/php)

      ‚ö†Ô∏è  ATTENTION: Cette action est irr√©versible !
    vars:
      TOOLS_DIR: '{{.TOOLS_DIR | default "./tools/php"}}'
    cmds:
    - |
      # Naviguer vers la racine du projet (parent du dossier download)
      cd ..
      project_root=$(pwd)

      # D√©terminer le chemin absolu du dossier de destination
      if [[ "{{.TOOLS_DIR}}" == /* ]]; then
        # Chemin absolu fourni
        tools_dir="{{.TOOLS_DIR}}"
      else
        # Chemin relatif fourni - le baser sur la racine du projet
        tools_dir="$project_root/{{.TOOLS_DIR}}"
      fi

      if [ ! -d "$tools_dir" ]; then
        echo "‚ùå Le dossier '$tools_dir' n'existe pas"
        exit 1
      fi

      echo "üóëÔ∏è  Suppression du dossier '$tools_dir' et de tous les outils..."
      read -p "√ätes-vous s√ªr ? [y/N] " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$tools_dir"
        echo "‚úÖ Dossier supprim√©"
      else
        echo "‚ùå Suppression annul√©e"
      fi
