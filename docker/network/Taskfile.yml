version: '3'

vars:
  NETWORK_NAME: '{{.NETWORK_NAME | default "taskfiles-network"}}'
  NETWORK_DRIVER: '{{.NETWORK_DRIVER | default "bridge"}}'

tasks:
  create:
    desc: "Cr√©e un r√©seau Docker"
    silent: true
    vars:
      NETWORK_NAME: '{{.NETWORK_NAME | default "taskfiles-network"}}'
      NETWORK_DRIVER: '{{.NETWORK_DRIVER | default "bridge"}}'
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Cr√©e un nouveau r√©seau Docker avec les param√®tres sp√©cifi√©s.

      Variables disponibles:
      - NETWORK_NAME: Nom du r√©seau (d√©faut: taskfiles-network)
      - NETWORK_DRIVER: Driver du r√©seau (d√©faut: bridge)

      Exemples:
      task docker:network:create
      task docker:network:create NETWORK_NAME=mon-reseau
      task docker:network:create NETWORK_NAME=mon-reseau NETWORK_DRIVER=overlay
    cmds:
    - |
      DOCKER_FORMAT="table {{.Name}}"
      if docker network ls --format "$DOCKER_FORMAT" | grep -q "^{{.NETWORK_NAME}}$"; then
        echo "‚ö†Ô∏è  Le r√©seau '{{.NETWORK_NAME}}' existe d√©j√†"
        docker network inspect {{.NETWORK_NAME}}
      else
        echo "üîß Cr√©ation du r√©seau Docker '{{.NETWORK_NAME}}' avec le driver '{{.NETWORK_DRIVER}}'..."
        docker network create --driver {{.NETWORK_DRIVER}} {{.NETWORK_NAME}}
        echo "‚úÖ R√©seau '{{.NETWORK_NAME}}' cr√©√© avec succ√®s"
      fi

  list:
    desc: "Liste tous les r√©seaux Docker"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: "Affiche la liste de tous les r√©seaux Docker disponibles"
    cmds:
    - echo "üìã Liste des r√©seaux Docker :"
    - docker network ls

  inspect:
    desc: "Inspecte un r√©seau Docker sp√©cifique"
    silent: true
    vars:
      NETWORK_NAME: '{{.NETWORK_NAME | default "taskfiles-network"}}'
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche les d√©tails d'un r√©seau Docker.

      Variables:
      - NETWORK_NAME: Nom du r√©seau √† inspecter (d√©faut: taskfiles-network)

      Exemple:
      task docker:network:inspect NETWORK_NAME=mon-reseau
    cmds:
    - |
      DOCKER_FORMAT="table {{.Name}}"
      if docker network ls --format "$DOCKER_FORMAT" | grep -q "^{{.NETWORK_NAME}}$"; then
        echo "üîç Inspection du r√©seau '{{.NETWORK_NAME}}' :"
        docker network inspect {{.NETWORK_NAME}}
      else
        echo "‚ùå Le r√©seau '{{.NETWORK_NAME}}' n'existe pas"
        echo "üìã R√©seaux disponibles :"
        docker network ls
      fi

  remove:
    desc: "Supprime un r√©seau Docker"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Supprime un r√©seau Docker existant.

      Variables:
      - NETWORK_NAME: Nom du r√©seau √† supprimer (d√©faut: taskfiles-network)

      Exemple:
      task docker:network:remove NETWORK_NAME=mon-reseau
    vars:
      NETWORK_NAME: '{{.NETWORK_NAME | default "taskfiles-network"}}'
    cmds:
    - |
      DOCKER_FORMAT="table {{.Name}}"
      if docker network ls --format "$DOCKER_FORMAT" | grep -q "^{{.NETWORK_NAME}}$"; then
        echo "üóëÔ∏è  Suppression du r√©seau '{{.NETWORK_NAME}}'..."
        docker network rm {{.NETWORK_NAME}}
        echo "‚úÖ R√©seau '{{.NETWORK_NAME}}' supprim√© avec succ√®s"
      else
        echo "‚ùå Le r√©seau '{{.NETWORK_NAME}}' n'existe pas"
        echo "üìã R√©seaux disponibles :"
        docker network ls
      fi

  prune:
    desc: "Nettoie les r√©seaux Docker inutilis√©s"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: "Supprime tous les r√©seaux Docker qui ne sont pas utilis√©s par au moins un conteneur"
    cmds:
    - echo "üßπ Nettoyage des r√©seaux Docker inutilis√©s..."
    - docker network prune -f
    - echo "‚úÖ Nettoyage termin√©"
