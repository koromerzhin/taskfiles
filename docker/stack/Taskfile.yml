version: '3'

vars:
  STACK_NAME: '{{.STACK_NAME | default "taskfiles-stack"}}'
  COMPOSE_FILE: '{{.COMPOSE_FILE | default "docker-compose.yml"}}'
  SWARM_COMPOSE_FILE: '{{.SWARM_COMPOSE_FILE | default "docker-stack.yml"}}'

tasks:
  deploy:
    desc: "D√©ploie une stack Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      D√©ploie une stack Docker en utilisant docker stack deploy.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose √† utiliser (d√©faut: docker-compose.yml)

      Exemples:
      task docker:stack:deploy
      task docker:stack:deploy STACK_NAME=mon-app
      task docker:stack:deploy STACK_NAME=mon-app COMPOSE_FILE=docker-stack.yml
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        echo "üìÅ Fichiers disponibles :"
        find . -name "docker-*.yml" -o -name "*compose*.yml" 2>/dev/null || echo "   Aucun fichier trouv√©"
        exit 1
      fi

      echo "üöÄ D√©ploiement de la stack '{{.STACK_NAME}}' avec le fichier '{{.COMPOSE_FILE}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' d√©ploy√©e avec succ√®s"

  deploy:with-build:
    desc: "D√©ploie une stack apr√®s avoir construit les images"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Construit les images puis d√©ploie la stack Docker Swarm.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        exit 1
      fi

      echo "üî® Construction des images..."
      docker-compose -f {{.COMPOSE_FILE}} build

      echo "üöÄ D√©ploiement de la stack '{{.STACK_NAME}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' construite et d√©ploy√©e"

  update:
    desc: "Met √† jour une stack existante"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Met √† jour une stack Docker Swarm existante.
      √âquivalent √† docker stack deploy mais avec des messages sp√©cifiques √† la mise √† jour.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - |
      if ! docker stack ls --format "{{{{.Name}}}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üîÑ Mise √† jour de la stack '{{.STACK_NAME}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' mise √† jour"

  remove:
    desc: "Supprime une stack Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Supprime compl√®tement une stack Docker Swarm.

      Variables:
      - STACK_NAME: Nom de la stack √† supprimer (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{{{.Name}}}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üóëÔ∏è  Suppression de la stack '{{.STACK_NAME}}'..."
      docker stack rm {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' supprim√©e"

  list:
    desc: "Liste toutes les stacks Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: "Affiche la liste de toutes les stacks d√©ploy√©es"
    cmds:
    - echo "üìã Stacks Docker Swarm d√©ploy√©es :"
    - docker stack ls

  services:
    desc: "Liste les services d'une stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche tous les services d'une stack sp√©cifique.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{{{.Name}}}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üîß Services de la stack '{{.STACK_NAME}}' :"
      docker stack services {{.STACK_NAME}}

  ps:
    desc: "Affiche les t√¢ches/conteneurs d'une stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche toutes les t√¢ches (conteneurs) d'une stack.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{{{.Name}}}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üì¶ T√¢ches de la stack '{{.STACK_NAME}}' :"
      docker stack ps {{.STACK_NAME}}

  logs:
    desc: "Affiche les logs d'un service de la stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche les logs d'un service sp√©cifique dans une stack.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - SERVICE_NAME: Nom du service (requis)

      Exemple:
      task docker:stack:logs STACK_NAME=mon-app SERVICE_NAME=web
    cmds:
    - |
      if [ -z "{{.SERVICE_NAME}}" ]; then
        echo "‚ùå SERVICE_NAME est requis"
        echo "üîß Services disponibles pour la stack '{{.STACK_NAME}}' :"
        docker stack services {{.STACK_NAME}} --format "table {{{{.Name}}}}\t{{{{.Replicas}}}}\t{{{{.Image}}}}"
        exit 1
      fi

      echo "üìÑ Logs du service '{{.STACK_NAME}}_{{.SERVICE_NAME}}' :"
      docker service logs {{.STACK_NAME}}_{{.SERVICE_NAME}} --follow

  validate:
    desc: "Valide un fichier docker-compose pour Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Valide la syntaxe d'un fichier docker-compose avant d√©ploiement.

      Variables:
      - COMPOSE_FILE: Fichier √† valider (d√©faut: docker-compose.yml)
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        exit 1
      fi

      echo "‚úÖ Validation du fichier '{{.COMPOSE_FILE}}'..."
      docker-compose -f {{.COMPOSE_FILE}} config
      echo "‚úÖ Fichier valide"

  full-deploy:
    desc: "D√©ploiement complet : validation + construction + d√©ploiement"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Effectue un d√©ploiement complet avec toutes les √©tapes :
      1. Validation du fichier docker-compose
      2. Construction des images si n√©cessaire
      3. D√©ploiement de la stack
      4. V√©rification du statut

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - task: docker:stack:validate
    - |
      echo "üî® Construction des images..."
      docker-compose -f {{.COMPOSE_FILE}} build
    - task: stack:deploy
    - |
      echo "‚è≥ Attente du d√©ploiement..."
      sleep 5
    - task: docker:stack:services
    - task: docker:stack:ps
