version: '3'

vars:
  STACK_NAME: '{{.STACK_NAME | default "taskfiles-stack"}}'
  COMPOSE_FILE: '{{.COMPOSE_FILE | default "docker-compose.yml"}}'
  SWARM_COMPOSE_FILE: '{{.SWARM_COMPOSE_FILE | default "docker-stack.yml"}}'

tasks:
  deploy:
    desc: "D√©ploie une stack Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      D√©ploie une stack Docker en utilisant docker stack deploy.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose √† utiliser (d√©faut: docker-compose.yml)

      Exemples:
      task docker:stack:deploy
      task docker:stack:deploy STACK_NAME=mon-app
      task docker:stack:deploy STACK_NAME=mon-app COMPOSE_FILE=docker-stack.yml
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        echo "üìÅ Fichiers disponibles :"
        find . -name "docker-*.yml" -o -name "*compose*.yml" 2>/dev/null || echo "   Aucun fichier trouv√©"
        exit 1
      fi

      echo "üöÄ D√©ploiement de la stack '{{.STACK_NAME}}' avec le fichier '{{.COMPOSE_FILE}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' d√©ploy√©e avec succ√®s"

  deploy:with-build:
    desc: "D√©ploie une stack apr√®s avoir construit les images"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Construit les images puis d√©ploie la stack Docker Swarm.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        exit 1
      fi

      echo "üî® Construction des images..."
      docker-compose -f {{.COMPOSE_FILE}} build

      echo "üöÄ D√©ploiement de la stack '{{.STACK_NAME}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' construite et d√©ploy√©e"

  update:
    desc: "Met √† jour une stack existante"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Met √† jour une stack Docker Swarm existante.
      √âquivalent √† docker stack deploy mais avec des messages sp√©cifiques √† la mise √† jour.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - |
      if ! docker stack ls --format "{{.Name}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üîÑ Mise √† jour de la stack '{{.STACK_NAME}}'..."
      docker stack deploy -c {{.COMPOSE_FILE}} {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' mise √† jour"

  remove:
    desc: "Supprime une stack Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Supprime compl√®tement une stack Docker Swarm.

      Variables:
      - STACK_NAME: Nom de la stack √† supprimer (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{.Name}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üóëÔ∏è  Suppression de la stack '{{.STACK_NAME}}'..."
      docker stack rm {{.STACK_NAME}}
      echo "‚úÖ Stack '{{.STACK_NAME}}' supprim√©e"

  list:
    desc: "Liste toutes les stacks Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: "Affiche la liste de toutes les stacks d√©ploy√©es"
    cmds:
    - echo "üìã Stacks Docker Swarm d√©ploy√©es :"
    - docker stack ls

  services:
    desc: "Liste les services d'une stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche tous les services d'une stack sp√©cifique.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{.Name}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üîß Services de la stack '{{.STACK_NAME}}' :"
      docker stack services {{.STACK_NAME}}

  ps:
    desc: "Affiche les t√¢ches/conteneurs d'une stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche toutes les t√¢ches (conteneurs) d'une stack.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
    cmds:
    - |
      if ! docker stack ls --format "{{.Name}}" | grep -q "^{{.STACK_NAME}}$"; then
        echo "‚ùå La stack '{{.STACK_NAME}}' n'existe pas"
        echo "üìã Stacks disponibles :"
        docker stack ls
        exit 1
      fi

      echo "üì¶ T√¢ches de la stack '{{.STACK_NAME}}' :"
      docker stack ps {{.STACK_NAME}}

  logs:
    desc: "Affiche les logs d'un service de la stack"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Affiche les logs d'un service sp√©cifique dans une stack.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - SERVICE_NAME: Nom du service (requis)

      Exemple:
      task docker:stack:logs STACK_NAME=mon-app SERVICE_NAME=web
    cmds:
    - |
      if [ -z "{{.SERVICE_NAME}}" ]; then
        echo "‚ùå SERVICE_NAME est requis"
        echo "üîß Services disponibles pour la stack '{{.STACK_NAME}}' :"
        docker stack services {{.STACK_NAME}} --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"
        exit 1
      fi

      echo "üìÑ Logs du service '{{.STACK_NAME}}_{{.SERVICE_NAME}}' :"
      docker service logs {{.STACK_NAME}}_{{.SERVICE_NAME}} --follow

  validate:
    desc: "Valide un fichier docker-compose pour Docker Swarm"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Valide la syntaxe d'un fichier docker-compose avant d√©ploiement.

      Variables:
      - COMPOSE_FILE: Fichier √† valider (d√©faut: docker-compose.yml)
    cmds:
    - |
      if [ ! -f "{{.COMPOSE_FILE}}" ]; then
        echo "‚ùå Le fichier '{{.COMPOSE_FILE}}' n'existe pas"
        exit 1
      fi

      echo "‚úÖ Validation du fichier '{{.COMPOSE_FILE}}'..."
      docker-compose -f {{.COMPOSE_FILE}} config
      echo "‚úÖ Fichier valide"

  check:containers:ready:
    desc: "V√©rifie que les conteneurs sp√©cifi√©s sont pr√™ts"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      V√©rifie que les conteneurs d'une liste sont tous actifs et en bonne sant√©.

      Variables:
      - CONTAINERS: Liste des conteneurs s√©par√©s par des virgules (ex: "traefik,portainer")
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - TIMEOUT: Timeout en secondes (d√©faut: 300)

      Exemple:
      task docker:stack:check:containers:ready CONTAINERS="traefik,portainer" STACK_NAME=mon-app
    vars:
      TIMEOUT: '{{.TIMEOUT | default "300"}}'
    cmds:
    - |
      if [ -z "{{.CONTAINERS}}" ]; then
        echo "‚ùå CONTAINERS est requis (ex: 'traefik,portainer')"
        exit 1
      fi

      echo "üîç V√©rification de l'√©tat des conteneurs : {{.CONTAINERS}}"

      # Convertir la liste en tableau compatible POSIX
      containers_list="{{.CONTAINERS}}"

      # Remplacer les virgules par des espaces et traiter chaque conteneur
      containers_clean=$(echo "$containers_list" | tr ',' ' ')

      for container in $containers_clean; do
        container=$(echo "$container" | xargs)  # Trim whitespace
        echo "üì¶ V√©rification du conteneur: $container"
        
        # V√©rifier si le conteneur existe et est en cours d'ex√©cution
        if docker ps --filter "name={{.STACK_NAME}}_${container}" --format "{{.Names}}" | grep -q "{{.STACK_NAME}}_${container}"; then
          echo "‚úÖ Conteneur $container est actif"
        else
          echo "‚ùå Conteneur $container n'est pas actif ou n'existe pas"
          echo "üìã Conteneurs disponibles pour la stack {{.STACK_NAME}} :"
          docker ps --filter "name={{.STACK_NAME}}" --format "table {{.Names}}\t{{.Status}}"
          exit 1
        fi
      done

      echo "‚úÖ Tous les conteneurs sont actifs!"

  wait:containers:ready:
    desc: "Attend que les conteneurs sp√©cifi√©s soient pr√™ts"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Attend que tous les conteneurs d'une liste soient actifs et en bonne sant√©.
      Effectue des v√©rifications p√©riodiques jusqu'au timeout.

      Variables:
      - CONTAINERS: Liste des conteneurs s√©par√©s par des virgules (ex: "traefik,portainer")
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - TIMEOUT: Timeout en secondes (d√©faut: 300)
      - CHECK_INTERVAL: Intervalle entre les v√©rifications en secondes (d√©faut: 10)

      Exemple:
      task docker:stack:wait:containers:ready CONTAINERS="traefik,portainer" TIMEOUT=600
    vars:
      TIMEOUT: '{{.TIMEOUT | default "300"}}'
      CHECK_INTERVAL: '{{.CHECK_INTERVAL | default "10"}}'
    cmds:
    - |
      if [ -z "{{.CONTAINERS}}" ]; then
        echo "‚ùå CONTAINERS est requis (ex: 'traefik,portainer')"
        exit 1
      fi

      echo "‚è≥ Attente que les conteneurs soient pr√™ts : {{.CONTAINERS}}"
      echo "üïê Timeout: {{.TIMEOUT}}s, Intervalle de v√©rification: {{.CHECK_INTERVAL}}s"

      start_time=$(date +%s)
      timeout_time=$((start_time + {{.TIMEOUT}}))

      # Convertir la liste en format compatible POSIX
      containers_list="{{.CONTAINERS}}"
      containers_clean=$(echo "$containers_list" | tr ',' ' ')

      while true; do
        current_time=$(date +%s)
        
        if [ $current_time -gt $timeout_time ]; then
          echo "‚ùå Timeout atteint ({{.TIMEOUT}}s). Les conteneurs ne sont pas tous pr√™ts."
          exit 1
        fi
        
        all_ready=true
        
        for container in $containers_clean; do
          container=$(echo "$container" | xargs)  # Trim whitespace
          
          if ! docker ps --filter "name={{.STACK_NAME}}_${container}" --format "{{.Names}}" | grep -q "{{.STACK_NAME}}_${container}"; then
            all_ready=false
            break
          fi
        done
        
        if [ "$all_ready" = true ]; then
          echo "‚úÖ Tous les conteneurs sont pr√™ts!"
          break
        fi
        
        elapsed=$((current_time - start_time))
        echo "‚è≥ Attente... (${elapsed}s/{{.TIMEOUT}}s)"
        sleep {{.CHECK_INTERVAL}}
      done

  check:containers:health:
    desc: "V√©rifie la sant√© des conteneurs avec healthcheck"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      V√©rifie l'√©tat de sant√© des conteneurs qui ont un healthcheck configur√©.

      Variables:
      - CONTAINERS: Liste des conteneurs s√©par√©s par des virgules (ex: "traefik,portainer")
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
    cmds:
    - |
      if [ -z "{{.CONTAINERS}}" ]; then
        echo "‚ùå CONTAINERS est requis (ex: 'traefik,portainer')"
        exit 1
      fi

      echo "üè• V√©rification de la sant√© des conteneurs : {{.CONTAINERS}}"

      # Convertir la liste en tableau
      IFS=',' read -ra CONTAINER_ARRAY <<< "{{.CONTAINERS}}"

      for container in "${CONTAINER_ARRAY[@]}"; do
        container=$(echo "$container" | xargs)  # Trim whitespace
        full_name="{{.STACK_NAME}}_${container}"
        
        echo "üîç V√©rification de $container..."
        
        # V√©rifier si le conteneur existe
        if ! docker ps --filter "name=$full_name" --format "{{.Names}}" | grep -q "$full_name"; then
          echo "‚ùå Conteneur $container n'existe pas ou n'est pas actif"
          continue
        fi
        
        # Obtenir l'√©tat de sant√©
        health_status=$(docker inspect $full_name --format='{{.State.Health.Status}}' 2>/dev/null || echo "no-healthcheck")
        
        case $health_status in
          "healthy")
            echo "‚úÖ $container: Sain"
            ;;
          "unhealthy")
            echo "‚ùå $container: Non sain"
            ;;
          "starting")
            echo "üü° $container: D√©marrage en cours"
            ;;
          "no-healthcheck")
            echo "‚ÑπÔ∏è  $container: Pas de healthcheck configur√©"
            ;;
          *)
            echo "‚ùì $container: √âtat inconnu ($health_status)"
            ;;
        esac
      done

  deploy:with:wait:
    desc: "D√©ploie une stack et attend que les conteneurs soient pr√™ts"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      D√©ploie une stack et attend que les conteneurs sp√©cifi√©s soient actifs.

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
      - CONTAINERS: Liste des conteneurs √† v√©rifier (ex: "traefik,portainer")
      - TIMEOUT: Timeout en secondes (d√©faut: 300)

      Exemple:
      task docker:stack:deploy:with:wait CONTAINERS="traefik,portainer" TIMEOUT=600
    cmds:
    - task: deploy
    - |
      if [ -n "{{.CONTAINERS}}" ]; then
        task docker:stack:wait:containers:ready CONTAINERS="{{.CONTAINERS}}" STACK_NAME="{{.STACK_NAME}}" TIMEOUT="{{.TIMEOUT | default \"300\"}}"
      else
        echo "‚ÑπÔ∏è  Aucun conteneur sp√©cifique √† v√©rifier (CONTAINERS non d√©fini)"
        echo "‚è≥ Attente de 30 secondes pour la stabilisation..."
        sleep 30
      fi

  full-deploy:
    desc: "D√©ploiement complet : validation + construction + d√©ploiement"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Effectue un d√©ploiement complet avec toutes les √©tapes :
      1. Validation du fichier docker-compose
      2. Construction des images si n√©cessaire
      3. D√©ploiement de la stack
      4. V√©rification du statut

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
    cmds:
    - task: docker:stack:validate
    - |
      echo "üî® Construction des images..."
      docker-compose -f {{.COMPOSE_FILE}} build
    - task: stack:deploy
    - |
      echo "‚è≥ Attente du d√©ploiement..."
      sleep 5
    - task: docker:stack:services
    - task: docker:stack:ps

  full-deploy:with:wait:
    desc: "D√©ploiement complet avec attente des conteneurs"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    summary: |
      Effectue un d√©ploiement complet et attend que les conteneurs soient pr√™ts :
      1. Validation du fichier docker-compose
      2. Construction des images si n√©cessaire
      3. D√©ploiement de la stack
      4. Attente que les conteneurs soient actifs
      5. V√©rification du statut

      Variables:
      - STACK_NAME: Nom de la stack (d√©faut: taskfiles-stack)
      - COMPOSE_FILE: Fichier docker-compose (d√©faut: docker-compose.yml)
      - CONTAINERS: Liste des conteneurs √† v√©rifier (ex: "traefik,portainer")
      - TIMEOUT: Timeout en secondes (d√©faut: 300)
    cmds:
    - task: docker:stack:validate
    - |
      echo "üî® Construction des images..."
      docker-compose -f {{.COMPOSE_FILE}} build
    - task: deploy:with:wait
    - task: docker:stack:services
    - task: docker:stack:ps
